@using DontCommitSecrets.Client.Models;
@using DontCommitSecrets.Client.Shared.Dialogs;
@using DontCommitSecrets.Client.Utils;
@inject IDialogService DialogService;

<MudPaper Class="@((Class ?? string.Empty) + " pa-4 d-flex flex-column")" Style="min-width: 300px">
    <a id="@LinkUtils.GetSectionLink(Section)" style="color: inherit">
        <MudText Typo="Typo.h5">@(string.IsNullOrEmpty(Section.Path) ? Section.Title : Section.Path)</MudText>
    </a>
    @foreach (var kvp in Section.Entries)
    {
        <SecretField Name="@kvp.Key" Section="@Section" OnFieldRemoved="@(() => StateHasChanged())"
                     OnSectionRemoved="@(() => TriggerOnSectionChanged())" />
    }

    <MudContainer Class="px-0 mt-auto pt-3">
        <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Secondary" OnClick="@OpenFieldDialog">Add field</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Info" OnClick="@OpenSectionDialog">Add Section</MudButton>
    </MudContainer>

</MudPaper>

@foreach (var subSection in RenderSubSectionsAsPanels ? Section.SubSections : Enumerable.Empty<Section>())
{
    <SecretsPanel Section="subSection" Class="@Class" OnSectionChanged="@(() => TriggerOnSectionChanged(true))" />
}

@code {
    [Parameter]
    public bool RenderSubSectionsAsPanels { get; set; } = true;

    [Parameter, EditorRequired]
    public Section Section { get; set; } = null!;

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public EventCallback OnSectionChanged { get; set; }

    public Task TriggerOnSectionChanged(bool stateHasChanged = false)
    {
        if (stateHasChanged)
        {
            StateHasChanged();
        }

        return OnSectionChanged.InvokeAsync();
    }

    public Task OpenFieldDialog()
    {
        return DialogService.OpenForResult<InputDialog, string>("Add field",
            dialogParametersAction: (dialogParams) => dialogParams.Add(x => x.Validator, (fieldName) =>
            {
                if (Section.Entries.ContainsKey(fieldName))
                {
                    return "Section already contains this key";
                }
                return null;
            }),
            resultAction: (fieldName) =>
            {
                Section.Entries.Add(fieldName, string.Empty);
                StateHasChanged();
            });
    }

    public Task OpenSectionDialog()
    {
        var sectionNames = Section.SubSections.Select(section => section.Title).ToHashSet();

        return DialogService.OpenForResult<InputDialog, string>("Add section",
            dialogParametersAction: (dialogParams) => dialogParams.Add(x => x.Validator, (sectionName) =>
            {
                if (sectionNames.Contains(sectionName))
                {
                    return "Section already has this subsection";
                }
                return null;
            }),
            resultAction: (sectionName) =>
            {
                Section.SubSections = Section.SubSections.Concat(new[]
                {
                    new Section
                    {
                        Title = sectionName,
                        Path = SectionUtils.ConstructPath(Section.Path!, sectionName),
                        Parent = Section,
                    }
                });

                TriggerOnSectionChanged(true).GetAwaiter().GetResult();
            });
    }
}
