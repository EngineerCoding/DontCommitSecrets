@using DontCommitSecrets.Client.Models;
@using DontCommitSecrets.Client.Services;
@inject IApiService ApiService;

<MudContainer Class="d-flex align-center px-0">
    <MudTextField Label="@Name" Value="TextualRepresentation" TextChanged="@OnTextChanged" Immediate="true"
                    Disabled="@Disabled" Variant="Variant.Text" Class="flex-auto" />
    <MudContainer Class="px-0" Style="flex-basis: 105px; min-width: 105px;">
        <MudFab Disabled=@(Disabled || TextualRepresentation == Section.Entries[Name].ToString())
                OnClick="SaveAsync" StartIcon="@Icons.Material.Filled.Save" Size="Size.Small" Color="Color.Tertiary"/>
        <MudFab Disabled=@Disabled StartIcon="@Icons.Material.Filled.Delete" Color="Color.Secondary"
                OnClick="DeleteAsync" Size="Size.Small" Class="ml-1" />
    </MudContainer>
</MudContainer>


@code {
    [Parameter, EditorRequired]
    public Section Section { get; set; } = null!;

    [Parameter, EditorRequired]
    public string Name { get; set; } = null!;

    [Parameter]
    public EventCallback OnFieldRemoved { get; set; }

    [Parameter]
    public EventCallback OnSectionRemoved { get; set; }

    public bool Disabled { get; set; }

    public bool Removed { get; set; }

    public string TextualRepresentation { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        TextualRepresentation = Section.Entries[Name].ToString()!;
    }

    private void OnTextChanged(string value)
    {
        TextualRepresentation = value;
    }

    public Task SaveAsync(MouseEventArgs _)
    {
        return RunWithDisabled(async () =>
        {
            await ApiService.SaveSecret(Section, Name, TextualRepresentation);
            Section.Entries[Name] = TextualRepresentation;
        });
    }

    public Task DeleteAsync(MouseEventArgs _)
    {
        return RunWithDisabled(async () =>
        {
            await ApiService.RemoveSecret(Section, Name);
            Section.Entries.Remove(Name);
            await OnFieldRemoved.InvokeAsync();

            if (Section.Entries.Count == 0 && Section.Parent != null)
            {
                Section.Parent.SubSections = Section.Parent.SubSections.Where(s => s != Section).ToArray();
                await OnSectionRemoved.InvokeAsync();
            }
        });
    }

    private async Task RunWithDisabled(Func<Task> task)
    {
        Disabled = true;
        try
        {
            await task.Invoke();
        }
        finally
        {
            Disabled = false;
        }
    }
}
